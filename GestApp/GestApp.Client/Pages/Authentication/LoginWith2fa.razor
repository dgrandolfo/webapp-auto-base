@page "/LoginWith2fa"
@layout LoginLayout
@using System.ComponentModel.DataAnnotations
@using GestApp.Client.Layout
@inject ILogger<LoginWith2fa> Logger
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Log in</PageTitle>

<MudIcon Icon="@Icons.Material.Rounded.Lock" Size="Size.Large" Style="width:100px; height:100px;" />

<br /><br /><br />

@if (showErrorAlert)
{
    <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(true))">
        @errorMessage
    </MudAlert>
    <br /><br />
}

<MudForm @ref="mudForm" Model="Input" @bind-IsValid="@success" @bind-Errors="@errors">
    <MudText Typo="Typo.h4" Class="mb-2">2FA</MudText>
    <MudText Class="mb-4">
        Your login is protected with an authenticator app. Enter your authenticator code below.
    </MudText>

    <MudTextField @bind-Value="Input.TwoFactorCode" 
    Label="Authenticator code" 
    For="@(() => Input.TwoFactorCode)"
    InputType="InputType.Number"
    Required="true" 
    Immediate="true" 
    Class="mb-6" />

    <MudButton ButtonType="ButtonType.Submit" 
    Variant="Variant.Filled" 
    Color="Color.Primary"
    Disabled="@(!success || _isLoading)"
    OnClick="() => HandleSubmit()">
        Send
    </MudButton>
</MudForm>

<!-- Overlay di caricamento -->
<MudOverlay Visible="@_isLoading" DarkBackground>
    <MudProgressCircular Indeterminate="true" Color="Color.Default" Size="Size.Large" Style="z-index: 1000;" />
</MudOverlay>

@code {
    private MudForm? mudForm;
    private bool _isLoading = false;

    private bool success;
    private string[] errors = { };
    private bool showErrorAlert;
    private string errorMessage = string.Empty;

    // Modello per il form
    private InputModel Input { get; set; } = new();

    // Parametri passati via query
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private async Task HandleSubmit()
    {
        _isLoading = true;
        errorMessage = string.Empty;

        try 
        {
            // Costruisci il DTO da inviare all'API
            var twoFactorDto = new TwoFactorLoginRequestDto
            {
                TwoFactorCode = Input.TwoFactorCode!
            };

            var response = await HttpClient.PostAsJsonAsync("api/authentication/2fa", twoFactorDto);
            if (response.IsSuccessStatusCode)
            {
                await Task.Delay(500);
                // Login 2FA effettuato, reindirizza alla pagina di destinazione
                NavigationManager.NavigateTo(ReturnUrl ?? "/", forceLoad: true);
            }
            else
            {
                // Gestione errore: mostra il messaggio restituito dall'API
                var errorResponse = await response.Content.ReadFromJsonAsync<ApiErrorResponseDto>();
                errorMessage = errorResponse?.Message ?? "Unknown error.";
                showErrorAlert = true;
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            showErrorAlert = true;
        }
        finally
        {
            _isLoading = false;
            success = false;
        }
    }

    private void CloseMe(bool value)
    {
        showErrorAlert = false;
    }

    // Modello usato nel form
    private sealed class InputModel
    {
        [Required(ErrorMessage = "Authenticator code is required.")]
        [StringLength(7, ErrorMessage = "The code must be between {2} and {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Authenticator code")]
        public string? TwoFactorCode { get; set; }

        [Display(Name = "Remember this machine")]
        public bool RememberMachine { get; set; }
    }

    // DTO per gestire gli errori dall'API
    private sealed class ApiErrorResponseDto
    {
        public string Message { get; set; } = string.Empty;
    }
}
