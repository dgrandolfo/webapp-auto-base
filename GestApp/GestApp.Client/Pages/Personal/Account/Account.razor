@page "/Personal/Account"
@using System.Text.RegularExpressions
@using GestApp.Client.Services.Interfaces
@using System.ComponentModel.DataAnnotations
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IBreadcrumbService BreadcrumbService
@inject HttpClient HttpClient

@attribute [Authorize]

<AuthorizeView>
    <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Account</MudText>
    <MudTabs Elevation="1" Rounded="true" PanelClass="mt-6">
        <MudTabPanel Text="General">
            <MudGrid>
                <MudItem xs="12" sm="4" md="3">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText>Profile</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <div class="d-flex justify-center mb-3">
                                <MudAvatar Color="Color.Primary" Style="height:100px; width:100px;">
                                    <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Large" Style="height:100px; width:100px;" />
                                </MudAvatar>
                            </div>
                            <MudText Align="Align.Center" Typo="Typo.h6" Style="font-weight:bold">@oldUserDetails.Name @oldUserDetails.Surname</MudText>
                            <MudText Align="Align.Center" Typo="Typo.body1">@oldUserDetails.Role</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="8" md="9">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText>Profile Details</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="userDetails.Name" Label="First Name" Variant="Variant.Outlined" Required="true" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="userDetails.Surname" Label="Last Name" Variant="Variant.Outlined" Required="true" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="userDetails.Role" Label="Role" Variant="Variant.Outlined" Disabled="true" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="userDetails.Email" Label="Email" Variant="Variant.Outlined" HelperText="Don't worry, we shall not spam!" Disabled="true" InputType="InputType.Email" />
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                        <MudCardActions Class="pb-4 pl-4">
                            <MudButton Variant="Variant.Filled" 
                                Color="Color.Primary" 
                                Class="ml-auto" 
                                @onclick="SaveChanges"
                                Disabled="@(string.IsNullOrWhiteSpace(userDetails.Name) || string.IsNullOrWhiteSpace(userDetails.Surname))">
                                    Save Changes
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudTabPanel>
        <MudTabPanel Text="Security">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6" GutterBottom="true">Authenticator app</MudText>
                </MudCardHeader>
                <MudCardContent>
                    @if (userDetails.TwoFactorEnabled.HasValue)
                    {
                        @if (!userDetails.TwoFactorEnabled!.Value)
                        {
                            @if (!showEnableAuthenticatorContent)
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Rounded.Add" Class="nav-button" @onclick="ToggleEnableAuthenticator">
                                    Add
                                </MudButton>
                            }
                            @if (showEnableAuthenticatorContent) 
                            {
                                <MudCardContent>
                                    <MudText Typo="Typo.body1" GutterBottom="true">To use an authenticator app go through the following steps:</MudText>

                                    <ol class="list ms-4">
                                        <li>
                                            <MudText Typo="Typo.body2">
                                                Download Microsoft Authenticator for
                                                <MudLink Target="_blank" Href="https://go.microsoft.com/fwlink/?Linkid=825072">Android</MudLink> or
                                                <MudLink Target="_blank" Href="https://go.microsoft.com/fwlink/?Linkid=825073">iOS</MudLink>
                                            </MudText>
                                        </li>
                                        <li>
                                            <MudText Typo="Typo.body2">
                                                Scan the QR Code or enter this key into your two factor authenticator app. Spaces and casing do not matter:
                                            </MudText>

                                            <MudAlert Variant="Variant.Text" Severity="Severity.Info" Icon="@Icons.Material.Filled.Key">@authenticator.SharedKey</MudAlert>

                                            <div data-url="@authenticator.AuthenticatorUri"></div>
                                            @if (!string.IsNullOrEmpty(authenticator.QrCodeImage))
                                            {
                                                <MudText Typo="Typo.body1">Scan this QR Code with your authenticator app:</MudText>
                                                <img src="@authenticator.QrCodeImage" alt="QR Code" style="max-width: 200px;" />
                                            }
                                        </li>
                                        <li>
                                            <MudText Typo="Typo.body2">
                                                Once you have scanned the QR code or input the key above, your two factor authentication app will provide you
                                                with a unique code. Enter the code in the confirmation box below.
                                            </MudText>
                                        </li>
                                    </ol>
                                </MudCardContent>
                            }
                        }
                        else
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Rounded.Clear" Class="nav-button" @onclick="ResetAuthenticator">
                                Reset
                            </MudButton>
                        }
                    }
                </MudCardContent>
                @if (showEnableAuthenticatorContent)
                {
                    <MudCardActions>
                        <MudForm @ref="mudForm" Model="@Code" Style="width:100%;">
                            <MudGrid>
                                <MudItem md="12">
                                    <MudTextField @bind-Value="Code" For="@(() => Code)"
                                    Label="Verification Code"
                                    HelperText="Please enter the code." 
                                    Required="true"
                                    MaxLength="7" />
                                </MudItem>
                                <MudItem md="12">
                                    <MudButton Variant="Variant.Filled" Color="Color.Success"
                                    FullWidth="true" ButtonType="ButtonType.Submit"
                                    @onclick="SendVerificationCode">
                                        Verify
                                    </MudButton>
                                </MudItem>
                            </MudGrid>
                        </MudForm>
                    </MudCardActions>
                }
            </MudCard>
        </MudTabPanel>
    </MudTabs>
</AuthorizeView>

@code {
    // User details
    private UserDto oldUserDetails { get; set; } = new();
    private UserDto userDetails { get; set; } = new();
    // Flag to show/hide the authenticator setup content
    private bool showEnableAuthenticatorContent = false;
    // Authenticator / Verification code
    private MudForm? mudForm;
    private AuthenticatorSetupDto authenticator = new();
    [Required]
    [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
    [DataType(DataType.Text)]
    [Display(Name = "Verification Code")]
    public string Code { get; set; } = String.Empty;
    public IEnumerable<string> RecoveryCodes { get; set; } = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        BreadcrumbService.SetBreadcrumb(new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Account", href: "/Personal/Account")
        });

        var response = await HttpClient.GetAsync($"api/user/current");
        if (response.IsSuccessStatusCode)
        {
            var responseDto = await response.Content.ReadFromJsonAsync<UserResponseDto>();
            if (responseDto is not null && responseDto.Succeeded)
            {
                if (responseDto.User is not null)
                {
                    oldUserDetails = new UserDto
                        {
                            Name = responseDto.User.Name,
                            Surname = responseDto.User.Surname,
                            Role = responseDto.User.Role
                        };
                    userDetails = responseDto.User;
                }
                else
                {
                    Snackbar.Add("Failed to retrieve user details", Severity.Error);
                }
            }
        }
    }

    async Task SaveChanges()
    {
        // Crea un DTO per l'aggiornamento con email, FirstName e LastName
        var userToUpdate = new UserUpdateDto
            {
                Email = userDetails.Email,
                Name = userDetails.Name!,
                Surname = userDetails.Surname!
            };

        var response = await HttpClient.PatchAsJsonAsync("api/user/update", userToUpdate);
        if (response.IsSuccessStatusCode)
        {
            var updatedUserResponse = await response.Content.ReadFromJsonAsync<UserResponseDto>();
            if (updatedUserResponse != null && updatedUserResponse.Succeeded && updatedUserResponse.User is not null)
            {
                oldUserDetails = new UserDto
                    {
                        Name = updatedUserResponse.User.Name,
                        Surname = updatedUserResponse.User.Surname,
                        Role = updatedUserResponse.User.Role
                    };
                userDetails = updatedUserResponse.User;
                Snackbar.Add("Profile details saved", Severity.Success);
            }
            else
            {
                Snackbar.Add("Profile details saved", Severity.Success);
                Snackbar.Add("Failed to retrieve updated user details", Severity.Error);
            }
        }
        else
        {
            var errorResponse = await response.Content.ReadFromJsonAsync<UserResponseDto>();
            Snackbar.Add(errorResponse?.Message ?? "Error updating profile", Severity.Error);
        }
    }

    async Task SendVerificationCode() 
    {
        var response = await HttpClient.GetAsync($"api/authentication/2fa/verify?code={Code}");
        if (response.IsSuccessStatusCode)
        {
            var twofactorResponse = await response.Content.ReadFromJsonAsync<TwoFactorLoginResponseDto>();
            if (twofactorResponse is null)
            {
                Snackbar.Add("Verification code not accepted", Severity.Error);
                return;
            }

            userDetails.TwoFactorEnabled = true;
            RecoveryCodes = twofactorResponse.RecoveryCodes ?? new List<string>();
            Snackbar.Add("Verification code accepted", Severity.Success);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Snackbar.Add("Verification code not accepted", Severity.Error);
        }
    }

    async Task ResetAuthenticator() 
    {
        var response = await HttpClient.PostAsync("api/authentication/2fa/reset", null);
        if (response.IsSuccessStatusCode)
        {
            var twofactorResponse = await response.Content.ReadFromJsonAsync<AuthenticatorSetupDto>();
            if (twofactorResponse is null)
            {
                Snackbar.Add("Failed to reset authenticator", Severity.Error);
                return;
            }
            authenticator = twofactorResponse;
            Snackbar.Add("Reconfigure the authenticator to successfully reset it", Severity.Warning);
            showEnableAuthenticatorContent = true;
            //TODO: Aggiustare le cose visibili al click del tasto reset
        }
        else
        {
            Snackbar.Add("Failed to reset authenticator", Severity.Error);
        }
    }

    async Task ToggleEnableAuthenticator()
    {
        showEnableAuthenticatorContent = !showEnableAuthenticatorContent;
        if (showEnableAuthenticatorContent) 
        {
            // Genera un nuovo codice di autenticazione
            var response = await HttpClient.GetFromJsonAsync<AuthenticatorSetupDto>("api/authentication/2fa/setup");
            if (response is not null)
            {
                authenticator = response;
            }
            else
            {
                Snackbar.Add("Failed to generate authenticator codes", Severity.Error);
            }
        }
    }
}
